#!/bin/bash
set -euo pipefail

# GitHub repository backup utility
# Clones all user repositories and archives them

# === GITHUB CONFIGURATION ===
GITHUB_USER=$(git config user.name || echo "")
if [[ -z "${GITHUB_USER}" ]]; then
    echo "Error: Git user.name not configured"
    exit 1
fi

# Get credentials from git credential helper
GITHUB_CREDENTIALS=$(git credential fill <<<"url=https://github.com" || true)
GITHUB_USERNAME=$(grep 'username' <<<"${GITHUB_CREDENTIALS}" | cut -d '=' -f2)
GITHUB_PASSWORD=$(grep 'password' <<<"${GITHUB_CREDENTIALS}" | cut -d '=' -f2)

if [[ -z "${GITHUB_USERNAME}" ]] || [[ -z "${GITHUB_PASSWORD}" ]]; then
    echo "Error: GitHub credentials not found"
    exit 1
fi

# === FETCH REPOSITORIES ===
echo "Fetching repository list..."
GITHUB_REPOS=$(curl -s -L \
    -H "Accept: application/vnd.github+json" \
    "https://${GITHUB_USERNAME}:${GITHUB_PASSWORD}@api.github.com/user/repos" |
    jq -r '.[].full_name') || {
    echo "Error: Failed to fetch repository list"
    exit 1
}

# === BACKUP CONFIGURATION ===
REPOS_DIR="/tmp/${GITHUB_USER}-repos"
BACKUP_DATE=$(date +"%Y-%m-%dT%H:%M:%S%:z")
ARCHIVE_NAME="${GITHUB_USER}-repos-${BACKUP_DATE}.tar.gz"
BACKUP_DRIVE="/dev/sdb"
BACKUP_PATH="backup/github"

# === MOUNT MANAGEMENT ===
BACKUP_MOUNTPOINT=$(findmnt -nr -o target -S "${BACKUP_DRIVE}" || true)
SHOULD_UNMOUNT=false

if [[ -z "${BACKUP_MOUNTPOINT}" ]]; then
    echo "Mounting backup drive..."
    mount "${BACKUP_DRIVE}" || {
        echo "Error: Failed to mount ${BACKUP_DRIVE}"
        exit 1
    }
    BACKUP_MOUNTPOINT=$(findmnt -nr -o target -S "${BACKUP_DRIVE}")
    SHOULD_UNMOUNT=true
fi

BACKUP_DESTINATION="${BACKUP_MOUNTPOINT}/${BACKUP_PATH}"

# === CLONE REPOSITORIES ===
echo "Creating temporary directory..."
mkdir -p "${REPOS_DIR}"

echo "Cloning repositories..."
while IFS= read -r repo; do
    echo "Cloning ${repo}..."
    git -C "${REPOS_DIR}" clone \
        "https://${GITHUB_USERNAME}:${GITHUB_PASSWORD}@github.com/${repo}" || {
        echo "Warning: Failed to clone ${repo}"
    }
done <<<"${GITHUB_REPOS}"

# === CREATE ARCHIVE ===
echo "Creating backup archive..."
mkdir -p "${BACKUP_DESTINATION}"
tar -czf "${BACKUP_DESTINATION}/${ARCHIVE_NAME}" \
    -C "${REPOS_DIR}" . \
    --force-local || {
    echo "Error: Failed to create archive"
    exit 1
}

# === CLEANUP ===
echo "Cleaning up..."
rm -rf "${REPOS_DIR}"

if [[ "${SHOULD_UNMOUNT}" == "true" ]]; then
    echo "Unmounting backup drive..."
    umount "${BACKUP_DRIVE}"
fi

echo "Backup complete: ${BACKUP_DESTINATION}/${ARCHIVE_NAME}"
