#!/bin/bash

# GitHub repository backup utility
# Clones all user repositories and archives them to a backup drive

# === GITHUB CONFIGURATION ===
# Retrieve GitHub credentials from git configuration
GITHUB_USER=$(git config user.name)
GITHUB_CREDENTIALS=$(git credential fill <<<"url=https://github.com")
GITHUB_USERNAME=$(echo "${GITHUB_CREDENTIALS}" | grep 'username' | cut -d '=' -f2)
GITHUB_PASSWORD=$(echo "${GITHUB_CREDENTIALS}" | grep 'password' | cut -d '=' -f2)

# Fetch repository list from GitHub API
GITHUB_REPOS=$(curl -s -L \
    -H "Accept: application/vnd.github+json" \
    "https://${GITHUB_USERNAME}:${GITHUB_PASSWORD}@api.github.com/user/repos" |
    jq -r '.[].full_name') || {
    echo "Failed to fetch repos"
    exit 1
}

# === BACKUP CONFIGURATION ===
# Set backup parameters
REPOS_DIR="/tmp/${GITHUB_USER}-repos"
BACKUP_DATE=$(date +"%Y-%m-%dT%H:%M:%S%:z")
ARCHIVE_NAME="${GITHUB_USER}-repos-${BACKUP_DATE}.tar.gz"
BACKUP_DRIVE="/dev/sdb"
BACKUP_DESTINATION="backup/github"
BACKUP_DRIVE_MOUNTPOINT=$(findmnt -nr -o target -S "${BACKUP_DRIVE}")
UNMOUNT_BACKUP_DRIVE=true

# === MOUNT MANAGEMENT ===
# Check if backup drive was already mounted
if [[ -n "${BACKUP_DRIVE_MOUNTPOINT}" ]]; then
    UNMOUNT_BACKUP_DRIVE=false
fi

# Mount backup drive if needed
if [[ -z "${BACKUP_DRIVE_MOUNTPOINT}" ]]; then
    echo "Mounting backup drive..."
    mount "${BACKUP_DRIVE}"
    BACKUP_DRIVE_MOUNTPOINT=$(findmnt -nr -o target -S "${BACKUP_DRIVE}")
else
    echo "Backup drive (${BACKUP_DRIVE}) is already mounted at ${BACKUP_DRIVE_MOUNTPOINT}"
fi

# Verify mount success
if [[ -z "${BACKUP_DRIVE_MOUNTPOINT}" ]]; then
    echo "Failed to mount drive!"
    echo "Quitting script"
    exit 1
fi

# Update backup destination path
BACKUP_DESTINATION="${BACKUP_DRIVE_MOUNTPOINT}/${BACKUP_DESTINATION}"

# === REPOSITORY BACKUP ===
# Create temporary directory for cloning
echo "Making a temporary directory at ${REPOS_DIR}..."
mkdir -p "${REPOS_DIR}"

# Clone all repositories
echo "Cloning GitHub repositories..."
for REPO in ${GITHUB_REPOS}; do
    git -C "${REPOS_DIR}" clone "https://${GITHUB_USERNAME}:${GITHUB_PASSWORD}@github.com/${REPO}"
    echo
done

# === ARCHIVE CREATION ===
# Create backup archive
echo "Archiving all the cloned repositories into a Tar GZip file..."
mkdir -p "${BACKUP_DESTINATION}"
tar -czf "${BACKUP_DESTINATION}/${ARCHIVE_NAME}" -C "${REPOS_DIR}" . --force-local

# === CLEANUP ===
# Remove temporary directory
echo "Removing the temporary directory at ${REPOS_DIR}..."
rm -rf "${REPOS_DIR}"

# Unmount backup drive if we mounted it
if [[ "${UNMOUNT_BACKUP_DRIVE}" == true ]]; then
    echo "Unmounting backup drive..."
    umount "${BACKUP_DRIVE}"
fi

echo "All repositories from ${GITHUB_USER} have been backed up to ${BACKUP_DESTINATION}/${ARCHIVE_NAME}"
